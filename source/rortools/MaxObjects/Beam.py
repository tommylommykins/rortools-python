import re

from Py3dsMax import mxs

import BeamThing

class RoRBeam(BeamThing.BeamThing):
    def __init__(self, name):
        BeamThing.BeamThing.__init__(self)
        self.name = self._make_beam_name(name)
        mxs.CustAttributes.add(self.max_object, mxs.RoRBeam)
        
    def _make_beam_name(self, parsed_name):
        """beam names generated by the maxscript exporters have their visibility/ropeness/supportness
        tacked onto their names. When reimported with this script, this needs to be removed.
        
        Additionally, sometimes when objects are copied in 3dsmax, a number is appended. This is removed
        from the end of these suffixes too.
        
        Otherwise, these suffixes would build up forever, resulting in names like
        beam_001_invisible_invisible001_invisible.
        """
        parsed_name = parsed_name.strip()
        parsed_name = re.sub(r'^;', "", parsed_name)
        parsed_name = re.sub(r'^(beam_)?', "beam_", parsed_name)
        end_of_name_matcher = re.compile(r'_(invisible|rope|support)\d*$', re.I)
        while re.search(end_of_name_matcher, parsed_name):
            parsed_name = re.sub(end_of_name_matcher, "", parsed_name)
            
        return parsed_name
    
    def apply_category(self, category):
        beam_object = self.max_object
        beam_object.sepcat_one = category.category1
        beam_object.sepcat_two = category.category2
    
    def apply_beam_defaults(self, beam_defaults):
        beam_object = self.max_object
        beam_object.spring = int(beam_defaults['spring'])
        beam_object.damp = beam_defaults['damp']   
        beam_object.deform = beam_defaults['deform'] 
        beam_object.break_force = beam_defaults['break_force']  
        if 'diameter' in beam_defaults: beam_object.diameter = beam_defaults['diameter'] 
        if 'ror_material' in beam_defaults: beam_object.ror_material = beam_defaults['ror_material']
        if 'deform_plastic' in beam_defaults: beam_object.deform_plastic = beam_defaults['deform_plastic']
    
    def _remove_invisibility_from_name(self, name):
        new_name = re.sub(r'_invisible(?=(_rope|_support)*$)', "", name)
        return new_name
    def _get_invisible(self): return self.max_object.invisible
    def _set_invisible(self, value):
        self.max_object.invisible = value
        self.max_object.name = self._remove_invisibility_from_name(self.max_object.name) 
        if value: self.max_object.name += "_invisible"
    invisible = property(_get_invisible, _set_invisible)
    
    def _remove_rope_from_name(self, name):
        return re.sub(r'_rope(?=(_invisible|_support)*$)', "", name)
    def _get_rope(self): return self.max_object.rope
    def _set_rope(self, value):
        self.max_object.rope = value
        self.max_object.name = self._remove_rope_from_name(self.max_object.name)
        if value: self.max_object.name += "_rope"
    rope = property(_get_rope, _set_rope)
    
    def _remove_support_from_name(self, name):
        return re.sub(r'_support(?=(_invisible|_rope)*$)', "", name)
    def _get_support(self): return self.max_object.support
    def _set_support(self, value):
        self.max_object.support = value
        self.max_object.name = self._remove_support_from_name(self.max_object.name)
        if value: self.max_object.name += "_support"
    support = property(_get_support, _set_support)